// start the right scenario
CALL start

SEQUENCE start

    // see user
    SET user1 to new user // from user class
    SET user1.position TO 3
    SET user1.destination TO 7

    // create new elevators from elevators class
    SET elevator_A to new elevators // from the elevator class
    SET elevator_A.position TO 2

    SET elevator_B to new elevators
    SET elevator_B.position TO 6

    SET elevator_Array to elevator_A AND elevator_B

 
    // put elevators in spot users are likely to be
    Call mesure_logic USING elevator_Array // TODO


    // start the elevator request
    Call elevator_request WITH user1 AND elevator_Array

    // get the user in the right elevator and send it to his floor
    Call move_elevator USING elevator_Array[elems] AND user1

ENDSEQUENCE

CLASS elevators
    SET elevators.position to 0
    SET elevators.direction to idle
    SET elevators.available to TRUE
    SET elevators.door_open to FALSE
ENDCLASS

CLASS user
    SET user.position to 0
    SET user.destination to 0
    SET user.inside to FALSE
ENDCLASS


SEQUENCE mesure_logic USING elevator_Array
    OBTAIN time WITH actual date and time
    // get the calls and the hours they were sent
ENDSEQUENCE

SEQUENCE elevator_request USING user1 AND elevator_Array
    // get the cosest elevator
    SET closest_elevator to null
    SET old_diff to null

    // see both elevators
    FOR EACH elems IN elevator_Array
        IF user1.position IS BIGGER THAN elems.position
            SET new_difference to user1.position - elems.position
        ENDIF
        IF user1.position IS SMALLER THAN elems.position
            SET new_difference to elems.position - user1.position
        ENDIF

        IF new_difference  IS SMALLER THAN old_diff
            // find the closest and set it to a variable
            SET closest_elevator TO elems
        ENDIF

        SET old_diff to new_difference //stock the variable to compare it
    ENDFOR EACH

    // get the elevator to the user
    IF user1.position IS SMALLER THAN closest_elevator.position
        WHILE user1.position IS SMALLER THAN closest_elevator.position
            DECREMENT closest_elevator.position by one
        ENDWHILE
    ENDIF
    IF user1.position IS BIGGER THAN closest_elevator.position
        WHILE user1.position IS BIGGER THAN closest_elevator.position
            INCREMENT closest_elevator.position by one
        ENDWHILE
    ENDIF
    // open and close elevator doors
    IF user1.position IS EQUAL TO closest_elevator.position AND user1.inside IS FALSE
        SET closest_elevator.open_door IS EQUAL TO TRUE
        SET user1.inside TO TRUE
        SET closest_elevator.open_door TO FALSE
        SET elevator_Array[elems] TO closest_elevator // give it all the properties
        SET closest_elevator TO null // reset the variable
    ENDIF

    RETURN elevator_Array[elems]

ENDSEQUENCE

SEQUENCE move_elevator USING elevator_Array[elems] AND user1
    WHILE user1.inside IS TRUE
        IF user1.position IS SMALLER THAN user1.destination
            SET elevator_Array[elems].available TO "up"
                INCREMENT elevator_Array[elems].position by one
            SET user1.position TO elevator_Array[elems].position
        ENDIF
        IF user1.position IS BIGGER THAN user1.destination
            SET elevator_Array[elems].available TO "down"
                DECREMENT elevator_Array[elems].position by one
            SET user1.position TO elevator_Array[elems].position
        ENDIF
        ELSE IF user1.position IS EQUAL TO user1.destination
            SET elevator_Array[elems].available to "idle"
            SET elevator_Array[elems].open_door to TRUE
            SET user1.inside TO FALSE
        ENDELSE IF
    ENDWHILE

    IF user1.inside IS FALSE
        SET elevator_Array[elems].door_open to FALSE
    ENDIF
    
ENDSEQUENCE


