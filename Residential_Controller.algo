// start the right scenario
CALL start

SEQUENCE start

    // see user
    SET user1 to new user WITH 3 AND 7
   

    // create new elevators from elevators class
    Call column WITH 1 AND 2 AND 10

    SET E1 to elevator with id 1
    SET E2 to elevator with id 2

    SET elevator_Array to E1 AND E2

 
    // put elevators in spot users are likely to be
    Call mesure_logic USING elevator_Array // TODO


    // start the elevator request
    Call elevator_request WITH user1 AND elevator_Array

    // get the user in the right elevator and send it to his floor
    Call move_elevator USING elevator_Array[elems] AND user1

ENDSEQUENCE

DEFINE column WITH _id AND num_of_elevator AND num_of_floors
    SET id to _id
    SET num_of_elevator to num_of_elevator
    SET num_of_floors to num_of_floors

    CALL create_elevators WITH num_of_elevator

    SEQUENCE create_elevators USING num_of_elevator
        FOR num_of_elevator
            SET elevator to elevator_id AND 0
            INCREMENT elevator_id
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

DEFINE elevators USING elevator_id AND elevator_position
    SET position to elevator_position
    SET direction to idle
    SET available to TRUE
    SET door_open to FALSE
ENDDEFINE

DEFINE user USING position AND destination
    SET position to position
    SET destination to destination
    SET inside to FALSE
ENDDEFINE


SEQUENCE mesure_logic USING elevator_Array
    OBTAIN time WITH actual date and time
    // get the calls and the hours they were sent
ENDSEQUENCE

SEQUENCE elevator_request USING user1 AND elevator_Array
    // get the cosest elevator
    SET closest_elevator to null
    SET old_diff to null

    // see both elevators
    FOR EACH elems IN elevator_Array
        IF position of user1 IS BIGGER THAN position of elems
            SET new_difference to position of user1 - position of elems
        ENDIF
        IF position of user1 IS SMALLER THAN position of elems
            SET new_difference to position of elems - position of user1
        ENDIF

        IF new_difference  IS SMALLER THAN old_diff
            // find the closest and set it to a variable
            SET closest_elevator TO elems
        ENDIF

        SET old_diff to new_difference //stock the variable to compare it
    ENDFOR EACH

    // get the elevator to the user
    IF position of user1 IS SMALLER THAN position of closest_elevator
        WHILE position of user1 IS SMALLER THAN position of closest_elevator
            DECREMENT position of closest_elevator
        ENDWHILE
    ENDIF
    IF position of user1 IS BIGGER THAN position of closest_elevator
        WHILE positionn of user1 IS BIGGER THAN position of closest_elevator
            INCREMENT position of closest_elevator
        ENDWHILE
    ENDIF
    // open and close elevator doors
    IF position of user1 IS EQUAL TO position of closest_elevator AND inside of user1 IS FALSE
        SET open_door of closest_elevator IS EQUAL TO TRUE
        SET inside of user1 TO TRUE
        SET open_door of closest_elevator TO FALSE
        SET elems TO closest_elevator // give it all the properties
        SET closest_elevator TO null // reset the variable
    ENDIF

    RETURN elems

ENDSEQUENCE

SEQUENCE move_elevator USING elems AND user1
    WHILE indside of user1 IS TRUE
        IF position of user1 IS SMALLER THAN destination of user1
            SET available of elems TO "up"
            INCREMENT position of elems
            SET position of user1 TO positon of elems
        ENDIF
        IF position of user1 IS BIGGER THAN destination of user1
            SET available of elems TO "down"
            DECREMENT elems position
            SET user1 position TO elems position
        ENDIF
        ELSE IF user1 position IS EQUAL TO user1 destination
            SET elems available to "idle"
            SET elems open_door to TRUE
            SET user1 inside TO FALSE
        ENDELSE IF
    ENDWHILE

    IF user1 inside IS FALSE
        SET elems door_open to FALSE
    ENDIF
    
ENDSEQUENCE


